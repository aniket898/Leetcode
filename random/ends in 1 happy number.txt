A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.
Example: 19 is a happy number
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Understand the problem:
The hint of the problem is if the input number is a happy number, it will end with 1. 
Else, it will loop endlessly in a cycle. Therefore, we could use a hash set to keep track of each number we have visited. If we saw a visited number, that means the loop has been formed and it will return a false. 


public class Solution {
    public boolean isHappy(int n) {
        if (n <= 0) {
            return false;
        }
         
        Set<Integer> set = new HashSet<Integer>();
         
        while (true) {
            int square = getSumOfSquare(n);
             
            if (square == 1) {
                return true;
            } else if (set.contains(square)) {
                return false;
            }
             
            set.add(square);
            n = square;
        }
    }
     
    private int getSumOfSquare(int n) {
        int result = 0;
         
        while (n > 0) {
            int digit = n % 10;
            n = n / 10;
            result += digit * digit;
        }
         
        return result;
    }
}
