Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (root == null) {
            return result;
        }
         
        List<Integer> curList = new ArrayList<Integer>();
        pathSumHelper(root, sum, 0, curList, result);
         
        return result;
    }
    
    private void pathSumHelper(TreeNode root, int sum, int curSum, List<Integer> curList, List<List<Integer>> result) {
        if (root == null) {
            return;
        }
         
        curSum += root.val;
        curList.add(root.val);
         
        if (root.left == null && root.right == null && curSum == sum) {
            result.add(new ArrayList<Integer>(curList));
            //curList.remove(curList.size() - 1);
        }
         
        if (root.left != null) {
            pathSumHelper(root.left, sum, curSum, curList, result);
            curList.remove(curList.size() - 1);
        }
         
        if (root.right != null) {
            pathSumHelper(root.right, sum, curSum, curList, result);
            curList.remove(curList.size() - 1);
        }
    }
}