Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.

Note:

Elements in a triplet (a,b,c) must be in non-descending order. (ie, a <= b <= c)
The solution set must not contain duplicate triplets. For example, given array S = {-1 0 1 2 -1 -4}, A solution set is:
(-1, 0, 1)
(-1, -1, 2) 

public class Solution {
	public ArrayList<ArrayList<Integer>> threeSum(ArrayList<Integer> A) {
	    ArrayList<ArrayList<Integer>> triplets = new ArrayList<ArrayList<Integer>>();
		if (A.size() < 3)
			return triplets;
	 	Collections.sort(A);
	 	for (int i = 0; i < A.size() - 2; i++) {
			if (i == 0 || A.get(i) > A.get(i - 1)) {
				int negativeNo = -A.get(i);
				int second = i + 1;
				int third = A.size() - 1;
				while (second < third) {
					if (A.get(second) + A.get(third) == negativeNo) {
						ArrayList<Integer> temp = new ArrayList<Integer>();
						temp.add(A.get(i));
						temp.add(A.get(second));
						temp.add(A.get(third));
						triplets.add(temp);
						second++;
						third--;
						while (second < third && A.get(second) == A.get(second - 1))
							second++;
						while (second < third && A.get(third) == A.get(third + 1))
							third--;
					} else if (A.get(second) + A.get(third) < negativeNo) {
						second++;
					} else {
						third--;
					}
				}
			}
		} 
		return triplets;
	}
}
class Solution : def canVisitAllRooms (self, rooms) : """ :type rooms: List[List[int]] :rtype: bool """ visited = [ 0 ] * len(rooms) self.dfs(rooms, 0 , visited) return sum(visited) == len(rooms) def dfs (self, rooms, index, visited) : visited[index] = 1 for key in rooms[index]: if not visited[key]: self.dfs(rooms, key, visited) 