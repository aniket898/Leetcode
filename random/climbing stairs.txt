You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Understand the problem:
The problem asks for climbing a stair case, which takes n steps to reach the top. Each time you can either climb 1 or 2 steps. How my distinct ways you can climb to the top. 

Iterative-based DP solution:
Like before, we define a DP array and its transit equation. We define dp[i] as the number of distinct ways from start to start level i. So dp[i] = dp[i - 1] + dp[i - 2]. 

public class Solution {
    public int climbStairs(int n) {
        if (n <= 1) {
            return 1;
        }
         
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
         
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
}