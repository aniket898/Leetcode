You are given a read only array of n integers from 1 to n.

Each integer appears exactly once except A which appears twice and B which is missing.

Return A and B.

Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Note that in your output A should precede B.

Example:

Input:[3 1 2 5 3] 

Output:[3, 4] 

A = 3, B = 4


public class Solution {
	// DO NOT MODIFY THE LIST
	public ArrayList<Integer> repeatedNumber(final List<Integer> A) {
	   List B = new ArrayList<Integer>();
			Integer[] Arr = new Integer[A.size()];
			Arr = A.toArray(Arr);
			int tempNum;
			for(int i=0;i<Arr.length;i++){
				tempNum = Math.abs(Arr[i]);
				if(Arr[tempNum-1]<0){
					B.add(tempNum);
				} else {
					Arr[tempNum-1] = -Arr[tempNum-1];
				}
			}
			for(int i=0;i<Arr.length;i++){
				if(Arr[i]>0)
					B.add(i+1);
			}
			
			return (ArrayList<Integer>) B;
	}
}
