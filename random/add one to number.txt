Given a non-negative number represented as an array of digits,

add 1 to the number ( increment the number represented by the digits ).

The digits are stored such that the most significant digit is at the head of the list.

Example:

If the vector has [1, 2, 3]

the returned vector should be [1, 2, 4]

as 123 + 1 = 124.

 NOTE: Certain things are intentionally left unclear in this question which you should practice asking the interviewer.
For example, for this problem, following are some good questions to ask :
Q : Can the input have 0’s before the most significant digit. Or in other words, is 0 1 2 3 a valid input?
A : For the purpose of this question, YES
Q : Can the output have 0’s before the most significant digit? Or in other words, is 0 1 2 4 a valid output?
A : For the purpose of this question, NO. Even if the input has zeroes before the most significant digit.




public class Solution {
	public ArrayList<Integer> plusOne(ArrayList<Integer> A) {
	   int carry = 0;
		if(A.size()==0){
			return A;
		} else {
			if(A.size()==1 && A.get(0)==0){
				A.set(A.size()-1,1);
				return A;
			} else {
				while(A.get(0)==0){
					A.remove(0);
				}
				if(A.get(A.size()-1)==9){
					A.set(A.size()-1, 0);
					carry=1;
				} else {
					A.set(A.size()-1, A.get(A.size()-1)+1);
					carry=0;
				}
				for(int i = A.size()-2;i>=0;i--){
					if(A.get(i)==9 && carry == 1){
						A.set(i, 0);
						carry = 1;
					} else if(carry==1) {
						A.set(i, A.get(i)+1);
						carry = 0;
					}
				}
				if(carry==1){
					A.add(1);
					Collections.reverse(A);
				}
			}
		}
		/*for(int i = 0;i<A.size();i++){
			System.out.println(A.get(i));
		}*/
		return A;
	}
}
