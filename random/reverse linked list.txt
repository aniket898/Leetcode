/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
         
        ListNode prev = null;
        ListNode curr = head;
        ListNode next = head.next;
         
        while (curr != null) {
            curr.next = prev;
            prev = curr;
            curr = next;
             
            if (next != null) {
                next = next.next;
            }
        }
         
        return prev;
    }
}



RECURSIVE
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
         
        return reverseListHelper(null, head);
    }
     
    private ListNode reverseListHelper(ListNode prev, ListNode curr) {
        if (curr == null) {
            return prev;
        }
         
        ListNode newHead = reverseListHelper(curr, curr.next);
         
        curr.next = prev;
         
        return newHead;
    }
}
