Input: Set[], set_size
1. Get the size of power set
    powet_set_size = pow(2, set_size)
2  Loop for counter from 0 to pow_set_size
     (a) Loop for i = 0 to set_size
          (i) If ith bit in counter is set
               Print ith element from set for this subset
     (b) Print seperator for subsets i.e., newline
Example:

Set  = [a,b,c]
power_set_size = pow(2, 3) = 8
Run for binary counter = 000 to 111

Value of Counter            Subset
    000                    -> Empty set
    001                    -> a
    011                    -> ab
   100                     -> c
   101                     -> ac
   110                     -> bc
   111                     -> abc
Program:

#include <stdio.h>
#include <math.h>
 
void printPowerSet(char *set, int set_size)
{
    /*set_size of power set of a set with set_size
      n is (2**n -1)*/
    unsigned int pow_set_size = pow(2, set_size);
    int counter, j;
 
    /*Run from counter 000..0 to 111..1*/
    for(counter = 0; counter < pow_set_size; counter++)
    {
      for(j = 0; j < set_size; j++)
       {
          /* Check if jth bit in the counter is set
             If set then pront jth element from set */
          if(counter & (1<<j))
            printf("%c", set[j]);
       }
       printf("\n");
    }
}
 
/*Driver program to test printPowerSet*/
int main()
{
    char set[] = {'a','b','c'};
    printPowerSet(set, 3);
 
    getchar();
    return 0;
}


Time Complexity: O(n2^n)




package string;
 
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
 
public class FindAllSubsetOfSet {
 
 public static void main(String[] args) {
  List<Object> list = new ArrayList<Object>();
  list.add("a");
  list.add("b");
  list.add("c");
   
  System.out.println(getSubsetUsingBitMap(list));
 }
  
 private static Set<Set<Object>> getSubsetUsingBitMap(List<Object> list){
   
  Set<Set<Object>> result = new HashSet<Set<Object>>();
   
  int numOfSubsets = 1 << list.size(); //OR Math.pow(2, list.size())
 
  // For i from 0 to 7 in case of [a, b, c], 
  // we will pick 0(0,0,0) and check each bits to see any bit is set, 
  // If set then element at corresponding position in a given Set need to be included in a subset. 
  for(int i = 0; i < numOfSubsets; i++){
       
   Set<Object> subset = new HashSet<Object>();
 
   int mask = 1; // we will use this mask to check any bit is set in binary representation of value i.
    
   for(int k = 0; k < list.size(); k++){
     
    if((mask & i) != 0){ // If result is !=0 (or >0) then bit is set.
     subset.add(list.get(k)); // include the corresponding element from a given set in a subset.
    }
     
    // check next bit in i.
    mask = mask << 1;
   }
    
   // add all subsets in final result.
   result.add(subset);
  }
  return result;  
 }
 
}