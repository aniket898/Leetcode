Write a program to check whether a given number is an ugly number.
Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.
Note that 1 is typically treated as an ugly number.
Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.
Understand the problem:
This problem can be solved by using greedy algorithm. First check if it could be divided by 2s, if not then 3s, and then 5s. Finally check if the number is 1. If yes, return true else return false. 


public class Solution {
    public boolean isUgly(int num) {
        if (num <= 0) {
            return false;
        }
         
        while (num > 1 && num % 2 == 0) {
            num /= 2;
        }
         
        while (num > 1 && num % 3 == 0) {
            num /= 3;
        }
         
        while (num > 1 && num % 5 == 0) {
            num /= 5;
        }
         
        if (num == 1) {
            return true;
        } else {
            return false;
        }
    }
}




We can maintain three lists of ugly numbers:
1*2, 2*2, 3*2, 4*2, 5*2, 6*2, 8*2, etc..
1*3, 2*3, 3*3, 4*3, 5*3, 6*3, 8*3, etc..
1*5, 2*5, 3*5, 4*5, 5*5, 6*5, 8*5, etc...

Then we can see that in each list, the ugly number is the ugly number itself times 2, 3 or 5. 
Then we can maintain three pointers of i, j, and k, and the next ugly number must be minimum number of Li, Lj and Lk. At last, we move forward the pointer. 



public class Solution {
    public int nthUglyNumber(int n) {
        if (n <= 0) {
            return 0;
        }
         
        List<Integer> nums = new ArrayList<>();
        nums.add(1);
         
        int i = 0;
        int j = 0;
        int k = 0;
         
        while (nums.size() < n) {
            int m2 = nums.get(i) * 2;
            int m3 = nums.get(j) * 3;
            int m5 = nums.get(k) * 5;
             
            int mn = Math.min(Math.min(m2, m3), m5);
            nums.add(mn);
             
            if (mn == m2) {
                i++;
            }
             
            if (mn == m3) {
                j++;
            }
             
            if (mn == m5) {
                k++;
            }
        }
         
        return nums.get(nums.size() - 1);
    }
}